name: CI/CD Pipeline

on:
  push:
    branches:
      - Silton
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Passo 1: Checkout do código do repositório
    - name: Checar o código do repositório
      uses: actions/checkout@v3

    # Passo 2: Instalar o Docker e Docker Compose
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Instalar Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        curl -L https://github.com/docker/compose/releases/download/v2.17.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version  # Verifica se o docker-compose foi instalado corretamente
    
    # Passo 3: Instalar dependências do backend
    - name: Instalar dependências do backend
      run: |
        cd api  # Entrar no diretório 'api' onde o package.json está
        npm install
    
    # Passo 4: Instalar dependências do frontend (se necessário)
    - name: Instalar dependências do frontend
      run: |
        cd blog-frontend  # Entrar no diretório 'blog-frontend', se necessário
        npm install

    # Passo 5: Construir as imagens Docker
    - name: Construir as imagens Docker
      run: |
        docker-compose -f docker-compose.yml build  # Construir imagens definidas no docker-compose.yml
    
    # Passo 6: Rodar os testes com Docker
    - name: Rodar os testes com Docker
      run: |
        docker-compose -f docker-compose.yml up -d
        docker-compose -f docker-compose.yml exec api npm test  # Executar testes dentro do container 'api'
        docker-compose -f docker-compose.yml down  # Parar os containers
    
    # Passo 7: Realizar deploy para o Docker Hub
    - name: Realizar deploy para o Docker Hub
      run: |
        echo "Realizando deploy para o Docker Hub..."
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        # Tag da imagem com o hash do commit (ou uma tag personalizada)
        docker tag techchallenge02-api:latest ${{ secrets.DOCKER_USERNAME }}/blog-professores:${{ github.sha }}  # Usando o hash do commit como tag
        # Enviar a imagem para o Docker Hub
        docker push ${{ secrets.DOCKER_USERNAME }}/grupo23/blog-professores:${{ github.sha }}
    env:
      MONGODB_URI: ${{ secrets.MONGODB_URI }}  # Usando a secret do MongoDB URI
