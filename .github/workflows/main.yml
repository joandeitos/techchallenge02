name: CI/CD Pipeline

on:
  push:
    branches:
      - main      # Rodar o workflow quando houver push na branch main
  pull_request:
    branches:
      - main      # Rodar o workflow para pull requests na branch main

jobs:
  # Job para rodar os testes
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: --health-cmd="curl --silent --fail localhost:27017 || exit 1" --health-timeout=3s --health-start-period=10s --health-interval=5s

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Build and run Docker container for tests
      run: |
        docker-compose -f docker-compose.yml up -d # Inicia o Docker Compose com os serviços (API e MongoDB)
        docker-compose exec api npm install       # Instala as dependências
        docker-compose exec api npm test         # Roda os testes da aplicação

    - name: Shut down Docker containers
      run: docker-compose down # Desliga os containers após os testes

  # Job para deploy e exposição do Swagger via ngrok
  deploy:
    runs-on: ubuntu-latest
    needs: test  # O deploy só ocorrerá se os testes passarem
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install ngrok
      run: |
        # Baixa e instala o ngrok
        curl -s https://ngrok.com/download | tar xz -C /tmp
        sudo mv /tmp/ngrok /usr/local/bin

    - name: Deploy to server and expose Swagger via ngrok
      run: |
        # Inicia os containers Docker com a aplicação
        docker-compose -f docker-compose.yml up --build -d

        # Aguarda o servidor estar pronto para aceitar conexões
        echo "Aguardando servidor iniciar..."
        until curl --silent --fail localhost:3000; do
          echo "Esperando o servidor iniciar..."
          sleep 5
        done
        
        # Expondo a aplicação via ngrok
        echo "Iniciando ngrok para expor Swagger..."
        ngrok http 3000 --log=stdout &
        sleep 10  # Espera o ngrok inicializar
        
        # Captura o link do Swagger gerado pelo ngrok
        NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
        
        echo "Swagger está disponível em: $NGROK_URL/api-docs#/"

    - name: Clean up Docker containers after deploy
      run: docker-compose down # Desliga os containers após o deploy
